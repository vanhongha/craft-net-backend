package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"craftnet/graph/model"
	"craftnet/internal/app/handlers"
	"fmt"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, input model.LoginInput) (any, error) {
	return handlers.Login(input.Username, input.Password)
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.RegisterInput) (any, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// db := db.GetDB()

	// rows, err := db.Query(ctx, "SELECT id, username FROM accounts")

	// if err != nil {
	// 	util.GetLogger().LogErrorWithMsgAndError("failed to get users", err, false)
	// 	return nil, errors.New("failed to get users")
	// }
	// defer rows.Close()

	// var users []*model.User
	// for rows.Next() {
	// 	var user model.User
	// 	if err := rows.Scan(&user.ID, &user.Username); err != nil {
	// 		util.GetLogger().LogErrorWithMsgAndError("failed to parse user", err, false)
	// 		return nil, errors.New("failed to parse user")
	// 	}
	// 	users = append(users, &user)
	// }

	// return users, nil

	return nil, nil
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success", nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
