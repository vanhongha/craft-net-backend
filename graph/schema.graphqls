directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Any
scalar Int64

type User {
  id: Int64!
  lastName: String!
  firstName: String!
  dateOfBirth: String!
  email: String!
  phoneNumber: String!
  status: String!
  avatar_media_id: Int64
  cover_media_id: Int64
  bio: String
}

type Media {
  id: Int64!
  urlPath: String!
}

type Account {
  id: Int64!
  user: User!
  username: String!
  passwordHash: String!
}

# REQUEST
input RegisterInput {
  username: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

input GetUserInput {
  userId: Int64!
}

# RESPONSE
type LoginResponse {
  accessToken: String!
  refreshToken: String!
  userId: Int64!
}

type RegisterResponse {
  accountId: Int64!
  userId: Int64!
  username: String!
  message: String!
}

type GetUserResponse {
  user: User!
  avatarUrl: String
  coverUrl: String
}

type AuthOps {
  login(input: LoginInput!): LoginResponse! @goField(forceResolver: true)
  register(input: RegisterInput!): RegisterResponse! @goField(forceResolver: true)
}

type Query {
  users: [User!]! @goField(forceResolver: true)

  protected: String! @goField(forceResolver: true) @auth
  user(input: GetUserInput!): GetUserResponse! @goField(forceResolver: true) @auth
}

type Mutation {
  auth: AuthOps! @goField(forceResolver: true)
}