scalar Int64

type User {
  id: Int64!
  lastName: String!
  firstName: String!
  dateOfBirth: String!
  email: String!
  phoneNumber: String!
  status: String!
}

type Account {
  id: Int64!
  user: User!
  username: String!
  passwordHash: String!
}

type AuthPayload {
  accessToken: String!
  reloadToken: String!
  user: User!
}

type RegisterResponse {
  accountId: Int64!
  userId: Int64!
  username: String!
}

input RegisterInput {
  username: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

type Query {
  users: [User!]!
}

type Mutation {
  register(input: RegisterInput!): RegisterResponse!
  login(input: LoginInput!): AuthPayload!
}